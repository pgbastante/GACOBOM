user www-data;
worker_processes 2;

# log only critical errors
error_log /var/log/nginx/error.log crit;

events {
    # essential for linux, optmized to serve many clients with each thread
    use epoll;

    # determines how much clients will be served per worker
    # max clients = worker_connections * worker_processes
    # max clients is also limited by the number of socket connections available on the system (~64k)
    worker_connections 4000;

    # Accept as many connections as possible, after nginx gets notification about a new connection.
    # May flood worker_connections, if that option is set too low.
    multi_accept on;
}

http {
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=one:8m max_size=3000m inactive=600m;
    proxy_temp_path /var/tmp;
    include mime.types;
    default_type application/octet-stream;

    # Buffer log writes to speed up IO,
    access_log /var/log/nginx/access.log;

    # Sendfile copies data between one FD and other from within the kernel.
    # More efficient than read() + write(), since the requires transferring data to and from the user space.
    # Because we are using VirtualBox, sendfile must be set to off because of a bug with non updating files
    sendfile off;

    # Tcp_nopush causes nginx to attempt to send its HTTP response head in one packet,
    # instead of using partial frames. This is useful for prepending headers before calling sendfile,
    # or for throughput optimization.
    # Uncomment this line if you set sendfile to on
    # tcp_nopush on;

    # don't buffer data-sends (disable Nagle algorithm). Good for sending frequent small bursts of data in real time.
    tcp_nodelay on;

    # Timeout for keep-alive connections. Server will close connections after this time.
    keepalive_timeout 30;

    # Number of requests a client can make over the keep-alive connection. This is set high for testing.
    # keepalive_requests 100000;

    # allow the server to close connection on non responding client, this will free up memory
    reset_timedout_connection on;

    # request timed out -- default 60
    client_body_timeout 10;

    # if client stop responding, free up memory -- default 60
    send_timeout 2;

    # Compression options
    gzip on;
    gzip_comp_level 6;
    gzip_vary on;
    gzip_min_length 10240;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
    gzip_buffers 16 8k;
    gzip_disable "MSIE [1-6]\.";

    # Do not disclose server information
    server_tokens off;

    # Defines one of the node instances on port 3000
    # can be as much servers as we like running on different ports
    upstream gacobom_upstream {
        server 127.0.0.1:3000;
        keepalive 64;
    }

    # Open file cache configuration
    open_file_cache max=5000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;

    server {
        # ipv4 & ipv6 support
        listen 80;
        listen [::]:80 ipv6only=on;

        # ssl support
        listen 443 ssl;
        listen [::]:443 ipv6only=on ssl;

        ssl_certificate /etc/nginx/server.crt;
        ssl_certificate_key /etc/nginx/server.key;
        ssl_protocols SSLv3 TLSv1;
        ssl_ciphers HIGH:!aNULL:!MD5;

        # Server paths & locations
        root /usr/share/nginx/html;
        index index.html index.htm;
        server_name gacobom.com www.gacobom.com;

        error_page 502 /errors/502.html;
        error_page 404 /errors/404.html;

        # Location for static files
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|html)$ {
            root /usr/share/nginx/html;
            expires max;
            log_not_found off;
            access_log off;
        }

        # Every request starting to /app will be redirected to node server so it can answer it
        location /app {
            proxy_pass http://192.168.33.22:3000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }

        # Erros only accessible as internal redirects
        location /errors {
            internal;
            root /usr/share/nginx/html/errors;
        }
    }
}