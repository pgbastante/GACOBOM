# Defines one of the node instances on port 3000
# can be as much servers as we like running on different ports
upstream app.gacobom.com {
    server 127.0.0.1:3000;
    keepalive 64;
}

server {
    # ipv4 & ipv6 support
    listen 80;
    listen [::]:80;

    # ssl support
    listen 443 ssl;
    listen [::]:443 ssl;

    ssl_certificate /etc/nginx/server.crt;
    ssl_certificate_key /etc/nginx/server.key;
    ssl_protocols SSLv3 TLSv1;
    ssl_ciphers HIGH:!aNULL:!MD5;

    server_name app.gacobom.com;

    location / {
        # add support for cors from https://gist.github.com/algal/5480916
        # specifically, this example allow CORS requests from
        #  scheme    : http or https
        #  authority : any authority ending in "gacobom.com"
        #  port      : nothing, or :<any_number>
        if ($http_origin ~* (https?://.*\.gacobom\.com(:[0-9]+)?)) {
            set $cors "true";
        }

        # Nginx doesn't support nested If statements, so we use string
        # concatenation to create a flag for compound conditions

        # OPTIONS indicates a CORS pre-flight request
        if ($request_method = 'OPTIONS') {
            set $cors "${cors}options";
        }

        # non-OPTIONS indicates a normal CORS request
        if ($request_method = 'GET') {
            set $cors "${cors}get";
        }

        if ($request_method = 'POST') {
            set $cors "${cors}post";
        }

        # if it's a GET or POST, set the standard CORS responses header
        if ($cors = "trueget") {
            add_header 'Access-Control-Allow-Origin' "$http_origin";
            add_header 'Access-Control-Allow-Credentials' 'true';
        }

        if ($cors = "truepost") {
            add_header 'Access-Control-Allow-Origin' "$http_origin";
            add_header 'Access-Control-Allow-Credentials' 'true';
        }

        # if it's OPTIONS, for a CORS preflight request, then respond immediately with no response body
        if ($cors = "trueoptions") {
            add_header 'Access-Control-Allow-Origin' "$http_origin";
            add_header 'Access-Control-Allow-Credentials' 'true';

            #
            # Return special preflight info
            #

            # Tell browser to cache this pre-flight info for 20 days
            add_header 'Access-Control-Max-Age' 1728000;

            # Tell browser we respond to GET,POST,OPTIONS in normal CORS requests.
            #
            # Not officially needed but still included to help non-conforming browsers.
            #
            # OPTIONS should not be needed here, since the field is used
            # to indicate methods allowed for "actual request" not the
            # preflight request.
            #
            # GET,POST also should not be needed, since the "simple
            # methods" GET,POST,HEAD are included by default.
            #
            # We should only need this header for non-simple requests
            # methods (e.g., DELETE), or custom request methods (e.g., XMODIFY)
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';

            # Tell browser we accept these headers in the actual request
            add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type,Accept,Origin,User-Agent,DNT,Cache-Control,X-Mx-ReqToken,Keep-Alive,X-Requested-With,If-Modified-Since';

            # build entire response to the preflight request
            # no body in this response
            add_header 'Content-Length' 0;
            # (should not be necessary, but included for non-conforming browsers)
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            # indicate successful return with no content
            return 204;
        }

        proxy_pass http://192.168.33.22:3000;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_set_header X-NginX-Proxy true;
        proxy_pass_header Set-Cookie;
        proxy_cache_bypass $cookie_nocache $arg_nocache $arg_comment;
        proxy_redirect off;


    }

}